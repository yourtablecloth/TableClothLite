name: Build and Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Generate version info
      run: |
        VERSION=$(date +"%Y.%-m.%-d.%H%M")
        TIMESTAMP=$(date +%s)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
        echo "Generated version: $VERSION"
        
    - name: Update version in files
      run: |
        # Update index.html
        sed -i "s/const buildVersion = '[^']*';/const buildVersion = '$VERSION';/g" TableClothLite/wwwroot/index.html
        
        # Update app.js
        sed -i "s/const buildVersion = '[^']*';/const buildVersion = '$VERSION';/g" TableClothLite/wwwroot/js/app.js
        
        # Update service-worker.js
        sed -i "s/const APP_VERSION = '[^']*';/const APP_VERSION = '$VERSION';/g" TableClothLite/wwwroot/service-worker.js
        sed -i "s/const BUILD_TIMESTAMP = [^;]*;/const BUILD_TIMESTAMP = $TIMESTAMP;/g" TableClothLite/wwwroot/service-worker.js
        
        # Update Chat.razor.cs
        sed -i 's/const string APP_VERSION = "[^"]*";/const string APP_VERSION = "'"$VERSION"'";/g' TableClothLite/Pages/Chat.razor.cs
        
        echo "Version updated in all files"
        
    - name: Restore dependencies
      run: dotnet restore TableClothLite/TableClothLite.csproj
      
    - name: Build
      run: dotnet build TableClothLite/TableClothLite.csproj --configuration Release --no-restore
      
    - name: Publish
      run: dotnet publish TableClothLite/TableClothLite.csproj --configuration Release --output ./publish
      
    - name: Setup SPA routing for GitHub Pages
      run: |
        # 404.html이 이미 wwwroot에 있는지 확인하고 복사
        if [ -f "TableClothLite/wwwroot/404.html" ]; then
          cp TableClothLite/wwwroot/404.html ./publish/wwwroot/404.html
          echo "404.html copied for SPA routing support"
        else
          echo "Warning: 404.html not found in wwwroot"
        fi
        
        # .nojekyll 파일 확인 및 복사
        if [ -f "TableClothLite/wwwroot/.nojekyll" ]; then
          cp TableClothLite/wwwroot/.nojekyll ./publish/wwwroot/.nojekyll
          echo ".nojekyll copied for GitHub Pages"
        else
          # .nojekyll 파일이 없으면 생성
          touch ./publish/wwwroot/.nojekyll
          echo ".nojekyll created for GitHub Pages"
        fi
        
        # SPA 라우팅 스크립트 확인
        if [ -f "TableClothLite/wwwroot/js/spa-routing.js" ]; then
          echo "SPA routing script found in build output"
        else
          echo "Warning: SPA routing script not found"
        fi
        
    - name: Create version.json
      run: |
        mkdir -p ./publish/wwwroot
        cat > ./publish/wwwroot/version.json << EOF
        {
          "version": "$VERSION",
          "timestamp": "$(date -Iseconds)",
          "buildTime": "$TIMESTAMP",
          "commit": "$GITHUB_SHA",
          "branch": "$GITHUB_REF_NAME",
          "spaRouting": true,
          "deployment": "github-pages"
        }
        EOF
        
    - name: Add smart cache headers
      run: |
        cat > ./publish/wwwroot/_headers << EOF
        # HTML 파일 - 항상 최신 버전 확인
        /*.html
          Cache-Control: no-cache, must-revalidate
          Pragma: no-cache
          X-Version: $VERSION
          X-Build-Time: $TIMESTAMP
        
        # SPA 라우팅 지원 파일들
        /404.html
          Cache-Control: no-cache, must-revalidate
          Pragma: no-cache
          X-SPA-Routing: enabled
        
        # 버전 정보 파일 - 캐시 비활성
        /version.json
          Cache-Control: no-cache, no-store, must-revalidate
          Pragma: no-cache
          Expires: 0
        
        # Service Worker - 브라우저가 자동으로 24시간마다 체크
        /service-worker.js
          Cache-Control: public, max-age=0, must-revalidate
          X-Version: $VERSION
        
        # SPA 라우팅 스크립트
        /js/spa-routing.js
          Cache-Control: public, max-age=3600, must-revalidate
          X-Version: $VERSION
          X-SPA-Support: true
        
        # WASM 파일 - 해시 기반이므로 영구 캐시 가능
        *.wasm
        *.dll
        *.pdb
          Cache-Control: public, max-age=31536000, immutable
          X-Content-Type-Options: nosniff
        
        # JavaScript/CSS - ETag 등을 통한 조건부 캐시
        *.js
        *.css
          Cache-Control: public, max-age=3600, must-revalidate
          X-Version: $VERSION
        
        # 이미지 및 폰트 - 중기 캐시
        *.png
        *.jpg
        *.jpeg
        *.gif
        *.ico
        *.woff
        *.woff2
          Cache-Control: public, max-age=86400, must-revalidate
        
        # JSON 파일 - 단기 캐시
        *.json
          Cache-Control: public, max-age=300, must-revalidate
          X-Version: $VERSION
        
        # Manifest 파일
        *.webmanifest
          Cache-Control: public, max-age=3600, must-revalidate
        EOF
        
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./publish/wwwroot

  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4