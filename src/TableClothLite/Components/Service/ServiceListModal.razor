@inject SandboxViewModel Model
@inject IJSRuntime JSRuntime

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.Apps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            식탁보 라이트 서비스 목록
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody Style="max-height: 70vh; overflow-y: auto; overflow-x: hidden;">
    <FluentStack Orientation="Orientation.Vertical" VerticalGap="16" Style="overflow-x: hidden;">
        <div style="padding-bottom: 16px; border-bottom: 1px solid var(--neutral-stroke-divider-rest);">
            <p style="margin: 0; color: var(--neutral-foreground-rest); font-size: 14px;">
                설치하지 않고 사용하는 식탁보를 경험해보세요. Windows Sandbox만 설치되어있으면 인터넷 뱅킹 환경을 곧바로 격리된 경량 가상 PC에서 분리해서 실행할 수 있습니다.
            </p>
            <p style="margin: 8px 0 0 0; color: var(--accent-foreground-rest); font-size: 13px; font-weight: 600;">
                ⚠️ Windows Sandbox가 반드시 설치되어 있어야 합니다. 
                <FluentAnchor Href="https://yourtablecloth.app/howto_install_sandbox" Target="_blank" Appearance="Appearance.Lightweight">
                    설치 방법 보기
                </FluentAnchor>
            </p>
        </div>

        <!-- 검색 영역 -->
        <div style="position: sticky; top: 0; background: var(--fill-color); z-index: 10; padding: 8px 0;">
            <FluentSearch @bind-Value="SearchText" 
                          Placeholder="서비스 이름 및 카테고리 입력"
                         Style="width: 100%;"
                         Autofocus="true">
                <FluentIcon Value="@(new Icons.Regular.Size16.Search())" Slot="start" />
                @if (!string.IsNullOrWhiteSpace(SearchText))
                {
                    <FluentButton Appearance="Appearance.Stealth" 
                                 OnClick="ClearSearch" 
                                 Style="padding: 4px;"
                                 Slot="end"
                                 Title="검색어 지우기">
                        <FluentIcon Value="@(new Icons.Regular.Size16.Dismiss())" />
                    </FluentButton>
                }
            </FluentSearch>
            
            @if (!string.IsNullOrWhiteSpace(SearchText))
            {
                <div style="margin-top: 8px; font-size: 12px; color: var(--neutral-foreground-rest);">
                    @{
                        var totalFilteredServices = FilteredServiceGroup.SelectMany(g => g).Count();
                    }
                    "@SearchText" 검색 결과: @(totalFilteredServices)개 서비스
                </div>
            }
        </div>

        @if (FilteredServiceGroup.Any())
        {
            @foreach (var eachGroup in FilteredServiceGroup)
            {
                <div class="service-category">
                    <FluentLabel Typo="Typography.Subject" Style="margin-bottom: 12px; display: block; color: var(--accent-foreground-rest);">
                        @Model.DisplayCategoryName(eachGroup.Key)
                        <span style="font-size: 12px; font-weight: normal; color: var(--neutral-foreground-rest);">
                            (@eachGroup.Count()개)
                        </span>
                    </FluentLabel>
                    
                    <div class="service-grid">
                        @foreach (var eachService in eachGroup)
                        {
                            <div class="service-grid-item">
                                <FluentCard class="service-card" 
                                           @onclick="() => LaunchServiceAsync(eachService)"
                                           @onmouseenter="() => OnCardHover(true)"
                                           @onmouseleave="() => OnCardHover(false)">
                                    <div class="service-card-content">
                                        <div class="service-icon">
                                            <FluentIcon Value="@(Icon.FromImageUrl(Model.CalculateAbsoluteUrl(eachService.ImageRelativePath)))" 
                                                       class="service-card-icon" />
                                        </div>
                                        <div class="service-name">
                                            @if (!string.IsNullOrWhiteSpace(SearchText) && 
                                                 eachService.DisplayName.ToLowerInvariant().Contains(SearchText.ToLowerInvariant()))
                                            {
                                                @(HighlightSearchText(eachService.DisplayName, SearchText))
                                            }
                                            else
                                            {
                                                @eachService.DisplayName
                                            }
                                        </div>
                                        <div class="service-play-icon">
                                            <FluentIcon Value="@(new Icons.Regular.Size16.Play())" />
                                        </div>
                                    </div>
                                </FluentCard>
                            </div>
                        }
                    </div>
                </div>
            }
        }
        else if (ServiceGroup.Any() && !string.IsNullOrWhiteSpace(SearchText))
        {
            <!-- 검색 결과가 없을 때 -->
            <FluentStack Orientation="Orientation.Vertical" VerticalAlignment="VerticalAlignment.Center" HorizontalAlignment="HorizontalAlignment.Center" Style="padding: 40px;">
                <FluentIcon Value="@(new Icons.Regular.Size48.Search())" Style="color: var(--neutral-foreground-rest); margin-bottom: 16px;" />
                <FluentLabel Typo="Typography.Subject" Style="color: var(--neutral-foreground-rest); text-align: center;">
                    "@SearchText"에 대한 검색 결과가 없습니다
                </FluentLabel>
                <FluentLabel Style="color: var(--neutral-foreground-rest); text-align: center; margin-top: 8px; font-size: 14px;">
                    다른 검색어를 시도해보세요
                </FluentLabel>
                <FluentButton Appearance="Appearance.Lightweight" OnClick="ClearSearch" Style="margin-top: 16px;">
                    <FluentIcon Value="@(new Icons.Regular.Size16.Dismiss())" Slot="start" />
                    검색어 지우기
                </FluentButton>
            </FluentStack>
        }
        else if (!ServiceGroup.Any())
        {
            <FluentStack Orientation="Orientation.Vertical" VerticalAlignment="VerticalAlignment.Center" HorizontalAlignment="HorizontalAlignment.Center" Style="padding: 40px;">
                <FluentProgressRing Style="width: 32px; height: 32px;" />
                <FluentLabel Style="margin-top: 16px; color: var(--neutral-foreground-rest);">
                    서비스 목록을 불러오는 중...
                </FluentLabel>
            </FluentStack>
        }
    </FluentStack>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@CloseAsync">
        닫기
    </FluentButton>
</FluentDialogFooter>

<style>
    .service-category {
        width: 100%;
        margin-bottom: 24px;
    }

    .service-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
        gap: 16px;
        width: 100%;
        box-sizing: border-box;
        padding: 0;
        margin: 0;
        overflow-x: hidden;
    }

    .service-grid-item {
        width: 100%;
        min-width: 0;
        box-sizing: border-box;
    }

    .service-card {
        height: 140px;
        width: 100%;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 16px;
        box-sizing: border-box;
        border-radius: 8px;
        background: var(--neutral-fill-rest);
        border: 1px solid var(--neutral-stroke-rest);
    }

    .service-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;
        border-color: var(--accent-stroke-control-default);
    }

    .service-card-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 8px;
        height: 100%;
        width: 100%;
        text-align: center;
        min-width: 0;
    }

    .service-icon {
        flex-shrink: 0;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .service-card-icon {
        width: 32px !important;
        height: 32px !important;
        transition: transform 0.2s ease;
    }

    .service-card:hover .service-card-icon {
        transform: scale(1.1);
    }

    .service-name {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 13px;
        line-height: 1.2;
        font-weight: 500;
        color: var(--neutral-foreground-rest);
        text-align: center;
        word-break: keep-all;
        overflow-wrap: break-word;
        max-width: 100%;
        min-width: 0;
        padding: 0 4px;
    }

    .service-play-icon {
        flex-shrink: 0;
        color: var(--accent-foreground-rest);
        opacity: 0.8;
        transition: opacity 0.2s ease;
    }

    .service-card:hover .service-play-icon {
        opacity: 1;
    }

    .search-highlight {
        background-color: var(--accent-fill-rest);
        color: var(--accent-foreground-rest);
        font-weight: 600;
        padding: 2px 4px;
        border-radius: 2px;
    }

    /* 반응형 디자인 */
    @@media (max-width: 768px) {
        .service-grid {
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 12px;
        }
        
        .service-card {
            height: 120px;
            padding: 12px;
        }
        
        .service-name {
            font-size: 12px;
        }
    }

    @@media (max-width: 480px) {
        .service-grid {
            grid-template-columns: repeat(2, 1fr);
            gap: 8px;
        }
        
        .service-card {
            height: 100px;
            padding: 8px;
        }
        
        .service-icon {
            width: 24px;
            height: 24px;
        }
        
        .service-card-icon {
            width: 24px !important;
            height: 24px !important;
        }
        
        .service-name {
            font-size: 11px;
        }
    }

    /* 오버플로우 방지 */
    fluent-dialog-body {
        overflow-x: hidden !important;
    }

    fluent-stack {
        overflow-x: hidden;
        width: 100%;
        box-sizing: border-box;
    }
</style>

@code {
    private MarkupString HighlightSearchText(string text, string searchText)
    {
        if (string.IsNullOrWhiteSpace(searchText) || string.IsNullOrWhiteSpace(text))
            return new MarkupString(text);

        var index = text.ToLowerInvariant().IndexOf(searchText.ToLowerInvariant());
        if (index == -1)
            return new MarkupString(text);

        var before = text.Substring(0, index);
        var match = text.Substring(index, searchText.Length);
        var after = text.Substring(index + searchText.Length);

        var highlightedText = $"{before}<span class=\"search-highlight\">{match}</span>{after}";
        return new MarkupString(highlightedText);
    }
}