@using TableClothLite.Shared.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop

<div class="services-modal" @onclick="HandleBackdropClick">
    <div class="modal-content" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h3>📋 서비스 목록</h3>
            <button class="close-btn" @onclick="Close" type="button">✕</button>
        </div>
        
        <div class="modal-body">
            <div class="services-info">
                <p><strong>식탁보 AI 서비스 목록</strong></p>
                <p>Windows Sandbox가 설치되어 있어야 사용할 수 있습니다.</p>
                
                @if (!string.IsNullOrEmpty(SearchText))
                {
                    <div class="search-info">
                        "@SearchText" 검색 결과: @FilteredServices.Count()개 서비스
                    </div>
                }
                else
                {
                    <div class="total-info">
                        총 @Model.Services.Count()개 서비스
                    </div>
                }
            </div>
            
            <div class="search-area">
                <div class="search-wrapper">
                    <span class="search-icon">🔍</span>
                    <input type="text" 
                           @bind="SearchText" 
                           @oninput="OnSearchInput"
                           placeholder="서비스 이름이나 카테고리로 검색..."
                           class="search-input" />
                    
                    @if (!string.IsNullOrWhiteSpace(SearchText))
                    {
                        <button @onclick="ClearSearch" class="clear-search-btn" type="button">✕</button>
                    }
                </div>
            </div>
            
            <div class="services-container" @onscroll="OnScroll">
                @if (DisplayedServices.Any())
                {
                    @foreach (var categoryGroup in DisplayedServicesByCategory)
                    {
                        <div class="category-section">
                            <div class="category-header">
                                <h4 class="category-title">
                                    @GetCategoryName(categoryGroup.Key)
                                    <span class="category-count">(@categoryGroup.Count()개)</span>
                                </h4>
                            </div>
                            
                            <div class="services-grid">
                                @foreach (var service in categoryGroup)
                                {
                                    <div class="service-card" @onclick="() => LaunchService(service)">
                                        <div class="service-card-content">
                                            <div class="service-icon">
                                                @if (!string.IsNullOrEmpty(service.ImageRelativePath))
                                                {
                                                    <img src="@Model.CalculateAbsoluteUrl(service.ImageRelativePath)" 
                                                         alt="@service.DisplayName" 
                                                         class="service-logo"
                                                         onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                                                    <div class="service-logo-fallback" style="display: none;">
                                                        🏢
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="service-logo-fallback">
                                                        🏢
                                                    </div>
                                                }
                                            </div>
                                            <div class="service-name">
                                                @if (!string.IsNullOrWhiteSpace(SearchText))
                                                {
                                                    @HighlightSearchText(service.DisplayName, SearchText)
                                                }
                                                else
                                                {
                                                    @service.DisplayName
                                                }
                                            </div>
                                            <div class="service-play-icon">▶</div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    
                    @* 로딩 중 표시 (더 많은 서비스가 있을 때) *@
                    @if (HasMoreServices && IsLoading)
                    {
                        <div class="loading-more">
                            <div class="loading-spinner">⏳</div>
                            <div class="loading-text">더 많은 서비스를 불러오는 중...</div>
                        </div>
                    }
                }
                else if (!string.IsNullOrWhiteSpace(SearchText))
                {
                    <div class="no-results">
                        <div class="no-results-icon">🔍</div>
                        <div class="no-results-text">
                            "@SearchText"에 대한 검색 결과가 없습니다.
                            <br>다른 검색어를 시도해보세요.
                        </div>
                    </div>
                }
                else if (!Model.Services.Any())
                {
                    <div class="loading">
                        <div class="loading-spinner">⏳</div>
                        <div class="loading-text">서비스 목록을 불러오는 중...</div>
                    </div>
                }
            </div>
        </div>
        
        <div class="modal-footer">
            <div class="footer-info">
                💡 서비스를 클릭하면 WSB 파일이 다운로드됩니다
            </div>
            <button class="btn btn-primary" @onclick="Close" type="button">
                닫기
            </button>
        </div>
    </div>
</div>

<style>
    .services-modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.6);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
        padding: 20px;
    }

    .modal-content {
        background: white;
        border-radius: 12px;
        max-width: 900px;
        width: 100%;
        max-height: 90vh;
        display: flex;
        flex-direction: column;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    }

    .modal-header {
        padding: 24px 24px 16px;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-shrink: 0;
    }

    .modal-header h3 {
        margin: 0;
        font-size: 1.5rem;
        font-weight: 600;
        color: #2c3e50;
    }

    .close-btn {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #6c757d;
        padding: 4px;
        border-radius: 4px;
        transition: all 0.2s ease;
    }

    .close-btn:hover {
        background: #f8f9fa;
        color: #495057;
    }

    .modal-body {
        padding: 24px;
        flex: 1;
        overflow: hidden;
        display: flex;
        flex-direction: column;
    }

    .services-info {
        margin-bottom: 20px;
        padding: 16px;
        background: #e3f2fd;
        border: 1px solid #90caf9;
        border-radius: 8px;
        flex-shrink: 0;
    }

    .services-info p {
        margin: 0 0 8px 0;
        color: #1565c0;
    }

    .services-info p:last-child {
        margin-bottom: 0;
    }

    .search-info, .total-info {
        font-size: 12px;
        color: #666;
        margin-top: 8px;
    }

    .search-area {
        margin-bottom: 20px;
        flex-shrink: 0;
    }

    .search-wrapper {
        position: relative;
        display: flex;
        align-items: center;
    }

    .search-icon {
        position: absolute;
        left: 16px;
        font-size: 16px;
        color: #6c757d;
        z-index: 1;
    }

    .search-input {
        width: 100%;
        padding: 12px 16px 12px 48px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 16px;
        outline: none;
        transition: border-color 0.2s ease;
    }

    .search-input:focus {
        border-color: #007bff;
    }

    .clear-search-btn {
        position: absolute;
        right: 12px;
        background: none;
        border: none;
        font-size: 18px;
        cursor: pointer;
        color: #6c757d;
        padding: 4px;
        border-radius: 4px;
    }

    .clear-search-btn:hover {
        background: #f8f9fa;
        color: #495057;
    }

    .services-container {
        flex: 1;
        overflow-y: auto;
        margin: -4px;
        padding: 4px;
        scroll-behavior: smooth;
    }

    .category-section {
        margin-bottom: 32px;
    }

    .category-header {
        margin-bottom: 16px;
        padding-bottom: 8px;
        border-bottom: 2px solid #e9ecef;
    }

    .category-title {
        margin: 0;
        font-size: 1.25rem;
        font-weight: 600;
        color: #2c3e50;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .category-count {
        font-size: 0.9rem;
        font-weight: normal;
        color: #6c757d;
    }

    .services-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 16px;
        padding: 4px;
    }

    .service-card {
        background: #ffffff;
        border: 2px solid #e9ecef;
        border-radius: 12px;
        padding: 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 160px;
        position: relative;
        overflow: hidden;
    }

    .service-card:hover {
        border-color: #007bff;
        transform: translateY(-4px);
        box-shadow: 0 8px 25px rgba(0, 123, 255, 0.15);
    }

    .service-card-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 12px;
        width: 100%;
        height: 100%;
        text-align: center;
    }

    .service-icon {
        width: 48px;
        height: 48px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
    }

    .service-logo {
        width: 48px;
        height: 48px;
        object-fit: contain;
        border-radius: 8px;
        transition: transform 0.2s ease;
    }

    .service-card:hover .service-logo {
        transform: scale(1.1);
    }

    .service-logo-fallback {
        width: 48px;
        height: 48px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        color: white;
    }

    .service-name {
        font-size: 14px;
        font-weight: 600;
        color: #2c3e50;
        line-height: 1.3;
        text-align: center;
        word-break: keep-all;
        overflow-wrap: break-word;
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .service-play-icon {
        font-size: 16px;
        color: #007bff;
        opacity: 0;
        transition: opacity 0.2s ease;
        position: absolute;
        top: 12px;
        right: 12px;
    }

    .service-card:hover .service-play-icon {
        opacity: 1;
    }

    .search-highlight {
        background-color: #ffd54f;
        font-weight: bold;
        padding: 2px 4px;
        border-radius: 2px;
    }

    .no-results, .loading {
        text-align: center;
        padding: 60px 20px;
        color: #6c757d;
    }

    .no-results-icon, .loading-spinner {
        font-size: 64px;
        margin-bottom: 20px;
        display: block;
    }

    .loading-more {
        text-align: center;
        padding: 40px 20px;
        color: #6c757d;
        border-top: 1px solid #e9ecef;
        margin-top: 20px;
    }

    .loading-more .loading-spinner {
        font-size: 32px;
        margin-bottom: 12px;
        opacity: 0.7;
    }

    .loading-more .loading-text {
        font-size: 14px;
        color: #9ca3af;
    }

    .modal-footer {
        padding: 16px 24px 24px;
        border-top: 1px solid #e9ecef;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-shrink: 0;
    }

    .footer-info {
        font-size: 14px;
        color: #6c757d;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .btn {
        padding: 10px 20px;
        border-radius: 6px;
        border: 1px solid;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.2s ease;
    }

    .btn-primary {
        background: #007bff;
        border-color: #007bff;
        color: white;
    }

    .btn-primary:hover {
        background: #0056b3;
        border-color: #004085;
    }

    /* 반응형 디자인 */
    .services-modal {
        /* 모바일 대응 기본 스타일은 이미 적용됨 */
    }

    /* 모바일 스타일 */
    .services-modal.mobile .modal-content {
        max-height: 95vh;
    }

    .services-modal.mobile .modal-header,
    .services-modal.mobile .modal-body,
    .services-modal.mobile .modal-footer {
        padding-left: 16px;
        padding-right: 16px;
    }

    .services-modal.mobile .services-grid {
        grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
        gap: 12px;
    }

    .services-modal.mobile .service-card {
        padding: 16px;
        min-height: 140px;
    }

    .services-modal.mobile .service-icon {
        width: 40px;
        height: 40px;
    }

    .services-modal.mobile .service-logo {
        width: 40px;
        height: 40px;
    }

    .services-modal.mobile .service-name {
        font-size: 12px;
    }

    .services-modal.mobile .modal-footer {
        flex-direction: column;
        gap: 12px;
        text-align: center;
    }
</style>

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Inject] private SandboxViewModel Model { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    private string _searchText = string.Empty;
    private string SearchText
    {
        get => _searchText;
        set => _searchText = value ?? string.Empty;
    }

    // 무한 스크롤 관련 속성
    private int _displayCount = 30; // 처음에 표시할 서비스 수
    private readonly int _loadIncrement = 20; // 스크롤 시 추가로 로드할 서비스 수
    private bool IsLoading { get; set; } = false;

    private IEnumerable<ServiceInfo> FilteredServices
    {
        get
        {
            if (string.IsNullOrWhiteSpace(SearchText))
            {
                return Model.Services.OrderBy(s => s.Category).ThenBy(s => s.DisplayName);
            }
            
            var searchTerm = SearchText.ToLowerInvariant();
            return Model.Services
                .Where(s => s.DisplayName.ToLowerInvariant().Contains(searchTerm) ||
                           s.ServiceId.ToLowerInvariant().Contains(searchTerm) ||
                           GetCategoryName(s.Category).ToLowerInvariant().Contains(searchTerm))
                .OrderBy(s => s.Category)
                .ThenBy(s => s.DisplayName);
        }
    }

    private IEnumerable<ServiceInfo> DisplayedServices
    {
        get
        {
            return FilteredServices.Take(_displayCount);
        }
    }

    private IEnumerable<IGrouping<string, ServiceInfo>> DisplayedServicesByCategory
    {
        get
        {
            return DisplayedServices.GroupBy(s => s.Category.Trim().ToLowerInvariant());
        }
    }

    private bool HasMoreServices
    {
        get
        {
            return FilteredServices.Count() > _displayCount;
        }
    }

    protected override void OnInitialized()
    {
        if (!Model.Services.Any())
        {
            Model.LoadCatalogCommand.ExecuteAsync(this)
                .ContinueWith(async (task) => {
                    await InvokeAsync(StateHasChanged);
                });
        }
    }

    private async Task Close()
    {
        await OnClose.InvokeAsync();
    }

    private async Task HandleBackdropClick()
    {
        await Close();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        SearchText = e.Value?.ToString() ?? string.Empty;
        _displayCount = 30; // 검색 시 초기 개수로 리셋
        StateHasChanged();
    }

    private void ClearSearch()
    {
        SearchText = string.Empty;
        _displayCount = 30;
        StateHasChanged();
    }

    // 스크롤 이벤트 처리
    private async Task OnScroll(EventArgs args)
    {
        if (IsLoading || !HasMoreServices)
            return;

        // 스크롤 위치 확인을 위해 JavaScript 호출
        var scrollInfo = await JSRuntime.InvokeAsync<ScrollInfo>("getScrollInfo", ".services-container");
        
        // 스크롤이 하단 근처에 도달했을 때 더 많은 서비스 로드
        if (scrollInfo.ScrollTop + scrollInfo.ClientHeight >= scrollInfo.ScrollHeight - 200)
        {
            await LoadMoreServices();
        }
    }

    // 더 많은 서비스 로드
    private async Task LoadMoreServices()
    {
        if (IsLoading || !HasMoreServices)
            return;

        IsLoading = true;
        StateHasChanged();

        // 실제 환경에서는 서버 지연을 시뮬레이션하지 않지만, 로딩 상태를 잠깐 보여주기 위해
        await Task.Delay(300);

        _displayCount += _loadIncrement;
        IsLoading = false;
        StateHasChanged();
    }

    private async Task LaunchService(ServiceInfo service)
    {
        try
        {
            // OpenSandboxAsync 호출을 통해 WSB 파일 생성 및 다운로드
            await Model.GenerateSandboxDocumentAsync(string.Empty, service);
            await Close(); // 서비스 실행 후 모달 닫기
        }
        catch (Exception ex)
        {
            Console.WriteLine($"서비스 실행 중 오류: {ex.Message}");
            // 필요시 사용자에게 오류 알림
        }
    }

    private string GetCategoryName(string category)
    {
        return Model.DisplayCategoryName(category.Trim().ToLowerInvariant());
    }

    private MarkupString HighlightSearchText(string text, string searchText)
    {
        if (string.IsNullOrWhiteSpace(searchText) || string.IsNullOrWhiteSpace(text))
            return new MarkupString(text);

        var index = text.ToLowerInvariant().IndexOf(searchText.ToLowerInvariant());
        if (index == -1)
            return new MarkupString(text);

        var before = text.Substring(0, index);
        var match = text.Substring(index, searchText.Length);
        var after = text.Substring(index + searchText.Length);

        var highlightedText = $"{before}<span class=\"search-highlight\">{match}</span>{after}";
        return new MarkupString(highlightedText);
    }

    // 스크롤 정보를 위한 클래스
    public class ScrollInfo
    {
        public double ScrollTop { get; set; }
        public double ScrollHeight { get; set; }
        public double ClientHeight { get; set; }
    }
}