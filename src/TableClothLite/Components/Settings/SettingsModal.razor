@using Microsoft.AspNetCore.Components
@using TableClothLite.Services
@using TableClothLite.Models
@using TableClothLite.Components
@implements IDisposable

<div class="settings-modal" @onclick="HandleBackdropClick">
    <div class="modal-content" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h3>⚙️ 설정</h3>
            <button class="close-btn" @onclick="Close" type="button">✕</button>
        </div>
        
        <!-- 탭 네비게이션 -->
        <div class="tab-navigation">
            <button class="tab-button @(_activeTab == "theme" ? "active" : "")" 
                    @onclick="@(() => SetActiveTab("theme"))" type="button">
                <span class="tab-icon">🎨</span>
                <span class="tab-label">테마</span>
            </button>
            <button class="tab-button @(_activeTab == "ai" ? "active" : "")" 
                    @onclick="@(() => SetActiveTab("ai"))" type="button">
                <span class="tab-icon">🤖</span>
                <span class="tab-label">AI 모델</span>
            </button>
            <button class="tab-button @(_activeTab == "sandbox" ? "active" : "")" 
                    @onclick="@(() => SetActiveTab("sandbox"))" type="button">
                <span class="tab-icon">🪟</span>
                <span class="tab-label">Sandbox</span>
            </button>
        </div>
        
        <div class="modal-body">
            <!-- 테마 설정 탭 -->
            <div class="tab-content @(_activeTab == "theme" ? "active" : "")">
                <div class="settings-section">
                    <div class="section-header">
                        <div class="section-title">
                            <span class="section-icon">🎨</span>
                            <h4>테마 설정</h4>
                        </div>
                        <div class="section-description">
                            앱의 외관과 색상 테마를 설정합니다.
                        </div>
                    </div>
                    
                    <div class="setting-card">
                        <div class="settings-grid">
                            <div class="setting-item theme-selection">
                                <div class="setting-info">
                                    <div class="setting-name">
                                        <span class="setting-icon">🌓</span>
                                        테마 모드
                                    </div>
                                    <div class="setting-description">앱의 색상 테마를 선택하세요</div>
                                </div>
                                <div class="theme-options">
                                    <div class="theme-option @(ThemeService.CurrentTheme == ThemeMode.Auto ? "active" : "")"
                                         @onclick="() => SetTheme(ThemeMode.Auto)">
                                        <div class="theme-preview auto">🌗</div>
                                        <div class="theme-label">자동</div>
                                        <div class="theme-description">시스템 설정 따름</div>
                                    </div>
                                    <div class="theme-option @(ThemeService.CurrentTheme == ThemeMode.Light ? "active" : "")"
                                         @onclick="() => SetTheme(ThemeMode.Light)">
                                        <div class="theme-preview light">☀️</div>
                                        <div class="theme-label">라이트</div>
                                        <div class="theme-description">밝은 테마</div>
                                    </div>
                                    <div class="theme-option @(ThemeService.CurrentTheme == ThemeMode.Dark ? "active" : "")"
                                         @onclick="() => SetTheme(ThemeMode.Dark)">
                                        <div class="theme-preview dark">🌙</div>
                                        <div class="theme-label">다크</div>
                                        <div class="theme-description">어두운 테마</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="settings-note">
                        <div class="note-icon">💡</div>
                        <div class="note-text">
                            자동 모드는 운영체제의 다크/라이트 모드 설정에 따라 자동으로 변경됩니다.
                            설정은 즉시 적용되며 다음 방문 시에도 유지됩니다.
                        </div>
                    </div>
                </div>
            </div>

            <!-- AI 모델 설정 탭 -->
            <div class="tab-content @(_activeTab == "ai" ? "active" : "")">
                <div class="settings-section">
                    <div class="section-header">
                        <div class="section-title">
                            <span class="section-icon">🤖</span>
                            <h4>AI 모델 설정</h4>
                        </div>
                        <div class="section-description">
                            채팅에 사용할 OpenRouter AI 모델을 선택합니다.
                        </div>
                    </div>
                    
                    <div class="setting-card">
                        <div class="setting-item model-selection">
                            <div class="setting-info">
                                <div class="setting-name">AI 모델</div>
                                <div class="setting-description">대화에 사용할 AI 모델을 선택하세요</div>
                            </div>
                            <div class="model-selector">
                                <select class="model-select" @bind="SettingsModel.OpenRouterModel">
                                    <optgroup label="무료 모델">
                                        <option value="openai/gpt-oss-20b:free">openai/gpt-oss-20b:free</option>
                                        <option value="meta-llama/llama-3.1-8b-instruct:free">meta-llama/llama-3.1-8b-instruct:free</option>
                                    </optgroup>
                                    <optgroup label="다른 모델">
                                        <option value="anthropic/claude-sonnet-4.5">anthropic/claude-sonnet-4.5</option>
                                        <option value="openai/gpt-5-mini">openai/gpt-5-mini</option>
                                        <option value="google/gemini-2.5-flash">google/gemini-2.5-flash</option>
                                    </optgroup>
                                </select>
                                <div class="model-info">
                                    <span class="model-note">💡 모델 변경 후 새로운 채팅에서 적용됩니다</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Windows Sandbox 설정 탭 -->
            <div class="tab-content @(_activeTab == "sandbox" ? "active" : "")">
                <div class="settings-section">
                    <div class="section-header">
                        <div class="section-title">
                            <span class="section-icon">🪟</span>
                            <h4>Windows Sandbox 설정</h4>
                        </div>
                        <div class="section-description">
                            WSB 파일 생성 시 적용될 설정을 관리합니다.
                        </div>
                    </div>
                    
                    <div class="setting-card">
                        <div class="settings-grid">
                            <div class="setting-item">
                                <div class="setting-info">
                                    <div class="setting-name">
                                        <span class="setting-icon">🌐</span>
                                        네트워크 사용
                                    </div>
                                    <div class="setting-description">인터넷 연결을 허용합니다</div>
                                </div>
                                <label class="toggle-switch">
                                    <input type="checkbox" @bind="SettingsModel.EnableNetworking" />
                                    <span class="slider"></span>
                                </label>
                            </div>
                            
                            <div class="setting-item">
                                <div class="setting-info">
                                    <div class="setting-name">
                                        <span class="setting-icon">🎤</span>
                                        오디오 녹음 사용
                                    </div>
                                    <div class="setting-description">마이크 사용을 허용합니다</div>
                                </div>
                                <label class="toggle-switch">
                                    <input type="checkbox" @bind="SettingsModel.EnableAudioInput" />
                                    <span class="slider"></span>
                                </label>
                            </div>
                            
                            <div class="setting-item">
                                <div class="setting-info">
                                    <div class="setting-name">
                                        <span class="setting-icon">📹</span>
                                        비디오 녹화 사용
                                    </div>
                                    <div class="setting-description">카메라 사용을 허용합니다</div>
                                </div>
                                <label class="toggle-switch">
                                    <input type="checkbox" @bind="SettingsModel.EnableVideoInput" />
                                    <span class="slider"></span>
                                </label>
                            </div>
                            
                            <div class="setting-item">
                                <div class="setting-info">
                                    <div class="setting-name">
                                        <span class="setting-icon">🖨️</span>
                                        프린터 공유 사용
                                    </div>
                                    <div class="setting-description">호스트 PC의 프린터를 공유합니다</div>
                                </div>
                                <label class="toggle-switch">
                                    <input type="checkbox" @bind="SettingsModel.EnablePrinterRedirection" />
                                    <span class="slider"></span>
                                </label>
                            </div>
                            
                            <div class="setting-item">
                                <div class="setting-info">
                                    <div class="setting-name">
                                        <span class="setting-icon">📋</span>
                                        복사/붙여넣기 사용
                                    </div>
                                    <div class="setting-description">클립보드 공유를 허용합니다</div>
                                </div>
                                <label class="toggle-switch">
                                    <input type="checkbox" @bind="SettingsModel.EnableClipboardRedirection" />
                                    <span class="slider"></span>
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="settings-note">
                        <div class="note-icon">💡</div>
                        <div class="note-text">
                            설정은 다음에 생성되는 WSB 파일부터 적용됩니다.
                            보안을 위해 필요한 기능만 활성화하는 것을 권장합니다.
                        </div>
                    </div>
                </div>
            </div>
            
            @if (_isLoading)
            {
                <div class="loading-indicator">
                    <span class="loading-spinner">⏳</span>
                    <span class="loading-text">설정을 저장하는 중...</span>
                </div>
            }
            
            @if (!string.IsNullOrEmpty(_statusMessage))
            {
                <div class="status-message @(_isError ? "error" : "success")">
                    <span class="status-icon">@(_isError ? "❌" : "✅")</span>
                    <span class="status-text">@_statusMessage</span>
                </div>
            }
        </div>
        
        <div class="modal-footer">
            <button class="btn btn-secondary" @onclick="ResetToDefaults" type="button" disabled="@_isLoading">
                기본값으로 복원
            </button>
            <button class="btn btn-primary" @onclick="SaveAndClose" type="button" disabled="@_isLoading">
                @(_isLoading ? "저장 중..." : "저장")
            </button>
        </div>
    </div>
</div>

<style>
    .settings-modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: var(--modal-backdrop, rgba(0, 0, 0, 0.6));
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
        padding: 20px;
    }

    .modal-content {
        background: var(--card-bg, white);
        border-radius: 16px;
        max-width: 800px;
        width: 100%;
        max-height: 90vh;
        display: flex;
        flex-direction: column;
        box-shadow: 0 20px 60px var(--shadow-color, rgba(0, 0, 0, 0.3));
        overflow: hidden;
        color: var(--primary-text, #212529);
    }

    .modal-header {
        padding: 24px 24px 16px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-shrink: 0;
    }

    .modal-header h3 {
        margin: 0;
        font-size: 1.5rem;
        font-weight: 600;
    }

    .close-btn {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        font-size: 20px;
        cursor: pointer;
        color: white;
        padding: 8px;
        border-radius: 8px;
        transition: all 0.2s ease;
    }

    .close-btn:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: scale(1.1);
    }

    .tab-navigation {
        display: flex;
        background: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
        flex-shrink: 0;
    }

    .tab-button {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        padding: 16px 24px;
        background: transparent;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 14px;
        font-weight: 500;
        color: #6c757d;
        position: relative;
    }

    .tab-button:hover {
        background: rgba(0, 123, 255, 0.1);
        color: #007bff;
    }

    .tab-button.active {
        background: white;
        color: #007bff;
        box-shadow: 0 -2px 0 #007bff inset;
    }

    .tab-icon {
        font-size: 16px;
    }

    .tab-label {
        font-weight: 600;
    }

    .modal-body {
        flex: 1;
        overflow-y: auto;
    }

    .tab-content {
        display: none;
        padding: 24px;
    }

    .tab-content.active {
        display: block;
    }

    .settings-section {
        margin-bottom: 32px;
    }

    .section-header {
        margin-bottom: 24px;
    }

    .section-title {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 8px;
    }

    .section-icon {
        font-size: 24px;
    }

    .section-title h4 {
        margin: 0;
        font-size: 1.3rem;
        font-weight: 600;
        color: var(--primary-text, #2c3e50);
    }

    .section-description {
        color: var(--secondary-text, #6c757d);
        font-size: 14px;
        line-height: 1.5;
        margin-left: 36px;
    }

    .setting-card {
        background: var(--card-bg, white);
        border: 1px solid var(--border-color, #e9ecef);
        border-radius: 12px;
        padding: 24px;
        box-shadow: 0 2px 8px var(--shadow-color, rgba(0, 0, 0, 0.1));
        transition: box-shadow 0.2s ease;
    }

    .settings-grid {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .setting-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 16px 0;
        border-bottom: 1px solid #f1f3f4;
    }

    .setting-item:last-child {
        border-bottom: none;
        padding-bottom: 0;
    }

    .setting-item.model-selection,
    .setting-item.theme-selection {
        flex-direction: column;
        align-items: stretch;
        gap: 16px;
        border-bottom: none;
        padding: 0;
    }

    .setting-info {
        flex: 1;
        margin-right: 16px;
    }

    .setting-item.model-selection .setting-info,
    .setting-item.theme-selection .setting-info {
        margin-right: 0;
    }

    .setting-name {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 16px;
        font-weight: 600;
        color: var(--primary-text, #2c3e50);
        margin-bottom: 4px;
    }

    .setting-icon {
        font-size: 16px;
    }

    .setting-description {
        font-size: 14px;
        color: var(--secondary-text, #6c757d);
    }

    /* 테마 선택 스타일 */
    .theme-options {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
        gap: 12px;
        width: 100%;
    }

    .theme-option {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 8px;
        padding: 16px;
        border: 2px solid var(--border-color, #e9ecef);
        border-radius: 12px;
        cursor: pointer;
        transition: all 0.2s ease;
        background: var(--card-bg, #ffffff);
        color: var(--primary-text, #212529);
    }

    .theme-option:hover {
        border-color: var(--accent-color, #007bff);
        background: var(--secondary-bg, #f8f9fa);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px var(--shadow-color, rgba(0, 0, 0, 0.1));
    }

    .theme-option.active {
        border-color: var(--accent-color, #007bff);
        background: var(--accent-color, #007bff);
        color: white;
        box-shadow: 0 4px 16px rgba(0, 123, 255, 0.3);
    }

    .theme-preview {
        font-size: 24px;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        background: var(--secondary-bg, #f8f9fa);
        border: 1px solid var(--border-color, #dee2e6);
    }

    .theme-option.active .theme-preview {
        background: rgba(255, 255, 255, 0.2);
        border-color: rgba(255, 255, 255, 0.3);
    }

    .theme-preview.auto {
        animation: themeRotate 4s linear infinite;
    }

    @@keyframes themeRotate {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }

    .theme-label {
        font-size: 14px;
        font-weight: 600;
        margin: 0;
    }

    .theme-description {
        font-size: 12px;
        opacity: 0.8;
        text-align: center;
        margin: 0;
    }

    /* 모델 선택기 */
    .model-selector {
        width: 100%;
    }

    .model-select {
        width: 100%;
        padding: 16px 20px;
        border: 2px solid var(--border-color, #e9ecef);
        border-radius: 12px;
        font-size: 14px;
        background: var(--card-bg, white);
        color: var(--primary-text, #212529);
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .model-select:focus {
        outline: none;
        border-color: var(--accent-color, #007bff);
        box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
    }

    .model-info {
        margin-top: 12px;
    }

    .model-note {
        font-size: 12px;
        color: var(--secondary-text, #6c757d);
        font-style: italic;
    }

    /* 토글 스위치 */
    .toggle-switch {
        position: relative;
        display: inline-block;
        width: 54px;
        height: 28px;
    }

    .toggle-switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .3s;
        border-radius: 28px;
        box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .slider:before {
        position: absolute;
        content: "";
        height: 22px;
        width: 22px;
        left: 3px;
        bottom: 3px;
        background-color: white;
        transition: .3s;
        border-radius: 50%;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    input:checked + .slider {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    input:checked + .slider:before {
        transform: translateX(26px);
    }

    .settings-note {
        display: flex;
        align-items: flex-start;
        gap: 12px;
        padding: 16px;
        background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
        border: 1px solid #ffeaa7;
        border-radius: 12px;
        margin-top: 24px;
    }

    .note-icon {
        font-size: 20px;
        flex-shrink: 0;
    }

    .note-text {
        font-size: 14px;
        color: #856404;
        line-height: 1.5;
    }

    .loading-indicator {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 16px;
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        border: 1px solid #90caf9;
        border-radius: 12px;
        margin: 16px 24px;
    }

    .loading-spinner {
        font-size: 16px;
        animation: spin 2s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .loading-text {
        font-size: 14px;
        color: #1565c0;
    }

    .status-message {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 16px;
        border-radius: 12px;
        margin: 16px 24px;
        animation: slideIn 0.3s ease;
    }

    @@keyframes slideIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .status-message.success {
        background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
        border: 1px solid #c3e6cb;
        color: #155724;
    }

    .status-message.error {
        background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
        border: 1px solid #f5c6cb;
        color: #721c24;
    }

    .status-icon {
        font-size: 16px;
        flex-shrink: 0;
    }

    .status-text {
        font-size: 14px;
    }

    .modal-footer {
        padding: 20px 24px;
        background: #f8f9fa;
        border-top: 1px solid #e9ecef;
        display: flex;
        justify-content: space-between;
        flex-shrink: 0;
    }

    .btn {
        padding: 12px 24px;
        border-radius: 8px;
        border: 1px solid;
        cursor: pointer;
        font-size: 14px;
        font-weight: 600;
        transition: all 0.2s ease;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .btn-secondary {
        background: #6c757d;
        border-color: #6c757d;
        color: white;
    }

    .btn-secondary:hover:not(:disabled) {
        background: #5a6268;
        border-color: #545b62;
        transform: translateY(-1px);
    }

    .btn-primary {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        border-color: #007bff;
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background: linear-gradient(135deg, #0056b3 0%, #004085 100%);
        border-color: #004085;
        transform: translateY(-1px);
    }

    @@media (max-width: 768px) {
        .settings-modal {
            padding: 10px;
        }

        .modal-content {
            max-width: 100%;
            max-height: 95vh;
            border-radius: 12px;
        }

        .modal-header,
        .tab-content,
        .modal-footer {
            padding-left: 16px;
            padding-right: 16px;
        }

        .tab-button {
            padding: 12px 16px;
            font-size: 13px;
        }

        .modal-footer {
            flex-direction: column-reverse;
            gap: 12px;
        }

        .btn {
            width: 100%;
        }
    }
</style>

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public string InitialTab { get; set; } = "theme";
    [Inject] private SettingsService SettingsService { get; set; } = default!;
    [Inject] private ThemeService ThemeService { get; set; } = default!;

    private SandboxSettingsModel _settingsModel = new();
    private bool _isLoading = false;
    private string _statusMessage = string.Empty;
    private bool _isError = false;
    private string _activeTab = "theme";

    // _settingsModel에 대한 참조를 제공
    private SandboxSettingsModel SettingsModel => _settingsModel;

    protected override async Task OnInitializedAsync()
    {
        // InitialTab 파라미터 값으로 초기 탭 설정
        _activeTab = InitialTab;
        
        await LoadCurrentSettings();
        ThemeService.ThemeChanged += OnThemeChanged;
    }

    private void OnThemeChanged(object? sender, ThemeChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void SetActiveTab(string tab)
    {
        _activeTab = tab;
        StateHasChanged();
    }

    private async Task SetTheme(ThemeMode theme)
    {
        await ThemeService.SetThemeAsync(theme);
        
        _statusMessage = $"테마가 '{GetThemeDisplayName(theme)}'(으)로 변경되었습니다.";
        _isError = false;
        StateHasChanged();
        
        await Task.Delay(2000);
        _statusMessage = string.Empty;
        StateHasChanged();
    }

    private string GetThemeDisplayName(ThemeMode theme)
    {
        return theme switch
        {
            ThemeMode.Auto => "자동",
            ThemeMode.Light => "라이트 모드",
            ThemeMode.Dark => "다크 모드",
            _ => "자동"
        };
    }

    private async Task LoadCurrentSettings()
    {
        try
        {
            _settingsModel = await SettingsService.GetSettingsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"설정 로드 중 오류: {ex.Message}");
            _settingsModel = new SandboxSettingsModel();
        }
    }

    private async Task SaveAndClose()
    {
        await SaveSettings();
        
        if (!_isError)
        {
            await Task.Delay(1000);
            await Close();
        }
    }

    private async Task SaveSettings()
    {
        _isLoading = true;
        _statusMessage = string.Empty;
        _isError = false;
        StateHasChanged();

        try
        {
            await SettingsService.SaveSettingsAsync(_settingsModel);
            
            _statusMessage = "설정이 성공적으로 저장되었습니다.";
            _isError = false;
        }
        catch (Exception ex)
        {
            _statusMessage = $"설정 저장 중 오류가 발생했습니다: {ex.Message}";
            _isError = true;
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ResetToDefaults()
    {
        try
        {
            await SettingsService.ResetToDefaultsAsync();
            _settingsModel = await SettingsService.GetSettingsAsync();
            
            _statusMessage = "설정이 기본값으로 복원되었습니다.";
            _isError = false;
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _statusMessage = $"기본값 복원 중 오류가 발생했습니다: {ex.Message}";
            _isError = true;
            StateHasChanged();
        }
    }

    private async Task Close()
    {
        await OnClose.InvokeAsync();
    }

    private async Task HandleBackdropClick()
    {
        if (!_isLoading)
        {
            await Close();
        }
    }

    public void Dispose()
    {
        ThemeService.ThemeChanged -= OnThemeChanged;
    }
}