@page "/"
@page "/Chat"

@using System.Text
@using AngleSharp.Html.Parser
@using OpenAI
@using System.Xml
@using System.Net
@using TableClothLite.Components.Catalog
@using TableClothLite.Components.Settings
@using TableClothLite.Services
@using TableClothLite.Components.Guide
@using TableClothLite.Components.Chat
@using TableClothLite.Components
@using Markdig
@using TableClothLite.Shared

@inject OpenAIChatService ChatService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject FileDownloadService FileDownloader
@inject SandboxComposerService SandboxComposer

<PageTitle>식탁보 AI</PageTitle>

<div class="chat-app">
    <!-- 메인 채팅 영역 -->
    <div class="chat-main">
        <!-- Gentle Update Notification -->
        @if (_showUpdateNotification && _pendingUpdate is not null)
        {
            <div class="update-notification">
                <div class="update-notification-content">
                    <div class="update-info">
                        <span class="update-icon">🎉</span>
                        <div class="update-text">
                            <strong>새 버전이 있습니다!</strong>
                            <div class="version-details">@_pendingUpdate.Version</div>
                        </div>
                    </div>
                    <div class="update-actions">
                        <button @onclick="ApplyUpdateAsync" class="update-btn primary" type="button">
                            업데이트
                        </button>
                        <button @onclick="DismissUpdateNotification" class="update-btn secondary" type="button">
                            나중에
                        </button>
                    </div>
                </div>
            </div>
        }

        <!-- 상단 헤더 -->
        <div class="chat-header">
            <div class="header-left">
                <div class="app-title-header">
                    <img src="/favicon.png" alt="식탁보 AI" class="header-app-icon">
                    <span class="app-name">식탁보 AI (Preview)</span>
                </div>
                @if (_hasApiKey && _messages.Any())
                {
                    <button @onclick="ResetConversationAsync" class="new-chat-btn-header" type="button" title="새로운 채팅 시작">
                        + 새 채팅
                    </button>
                }
            </div>
            <div class="header-actions">
                <!-- 통합 메뉴 드롭다운 -->
                <div class="menu-dropdown">
                    <button @onclick="ToggleMenuDropdown" class="header-action-btn" title="메뉴" type="button">
                        ⋯
                    </button>
                    <div class="menu-dropdown-content @(_showMenuDropdown ? "show" : "")">
                        @if (_hasApiKey && _messages.Any())
                        {
                            <!-- 로그인 + 대화 있을 때 -->
                            <button @onclick="PrintAndHideDropdown" class="dropdown-item" type="button">
                                🖨️ 인쇄하기
                            </button>
                            <button @onclick="ExportAndHideDropdown" class="dropdown-item" type="button">
                                📄 텍스트로 내보내기
                            </button>
                            <button @onclick="ShareAndHideDropdown" class="dropdown-item" type="button">
                                📤 공유하기
                            </button>
                            <div class="dropdown-divider"></div>
                        }
                        @if (_hasApiKey)
                        {
                            <!-- 로그인 상태에서만 보이는 메뉴 -->
                            <button @onclick="OpenSettingDialogAndHideMenu" class="dropdown-item" type="button">
                                ⚙️ 설정
                            </button>
                            <div class="dropdown-divider"></div>
                        }
                        <!-- 공통 메뉴 -->
                        <button @onclick="OpenServicesModalAndHideMenu" class="dropdown-item" type="button">
                            🛒 서비스 목록
                        </button>
                        <a href="https://github.com/sponsors/yourtablecloth" target="_blank" class="dropdown-item" @onclick="HideMenuDropdown">
                            💝 개발 후원하기
                        </a>
                        <a href="https://github.com/yourtablecloth/TableClothLite" target="_blank" class="dropdown-item" @onclick="HideMenuDropdown">
                            <strong>{;}</strong> GitHub
                        </a>
                        <a href="https://yourtablecloth.app/" target="_blank" class="dropdown-item" @onclick="HideMenuDropdown">
                            🏠 식탁보 홈페이지
                        </a>
                        @if (_hasApiKey)
                        {
                            <!-- 로그인 상태에서만 보이는 로그아웃 -->
                            <div class="dropdown-divider"></div>
                            <button @onclick="LogoutAndHideMenu" class="dropdown-item logout-item" type="button">
                                ⏻ 로그아웃
                            </button>
                        }
                    </div>
                </div>
                
                <!-- 테마 토글 버튼 -->
                <ThemeToggle Compact="true" />
                
                <!-- 로그인 버튼 (로그아웃 상태일 때만 표시) -->
                @if (_isCheckingApiKey)
                {
                    <button class="auth-btn-header checking" disabled type="button" title="로그인 상태 확인 중">
                        ⏳
                    </button>
                }
                else if (!_hasApiKey)
                {
                    <button @onclick="HandleLoginAsync" class="auth-btn-header login" type="button" title="로그인">
                        🔑
                    </button>
                }
            </div>
        </div>

        <!-- 메시지 컨테이너 -->
        <div class="messages-container" id="messages">
            @if (!_messages.Any())
            {
                <div class="welcome-screen">
                    <div class="welcome-content">
                        <div class="logo-container">
                            <img src="/icon-512.png" alt="식탁보 AI" class="welcome-logo" />
                        </div>
                        <h1>식탁보 AI에 오신 것을 환환습니다</h1>
                        <p class="welcome-subtitle">언제나 안전하고 똑똑하게! - AI와 함께하는 인터넷 뱅킹 보안 어시스턴트</p>
                        
                        @if (_hasApiKey)
                        {
                            <div class="example-prompts">
                                @foreach (var prompt in GetExamplePrompts())
                                {
                                    <div class="example-prompt" @onclick='() => SetExamplePrompt(prompt.Text)'>
                                        @prompt.Icon @prompt.Text
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="login-required-notice">
                                <div class="lock-icon">🔒</div>
                                <h3>로그인이 필요합니다</h3>
                                <p>AI 채팅 기능을 사용하려면 OpenRouter 계정으로 로그인해주세요.</p>
                            </div>
                        }
                        
                        <div class="disclaimer" style="font-weight: bolder; color: red;">
                            ⚠️ 사용 시 주의 사항: AI가 생성한 정보는 부정확할 수 있습니다. 중요한 결정은 전문가와 상담하세요. 민감 정보 및 개인 정보는 절대로 입력하지 마세요.
                        </div>
                        
                        @if (!_sponsorBannerDismissed)
                        {
                            <div style="margin-top: 24px;">
                                <SponsorBanner OnDismiss="DismissSponsorBanner" />
                            </div>
                        }
                    </div>
                </div>
            }

            <div class="messages-list">
                @foreach (var message in _messages.Select((msg, idx) => new { Message = msg, Index = idx }))
                {
                    <div class="message-group @(message.Message.IsUser ? "user-group" : "assistant-group")">
                        <div class="message-avatar-column">
                            <div class="message-avatar">
                                @if (message.Message.IsUser)
                                {
                                    <div class="user-avatar">👤</div>
                                }
                                else
                                {
                                    <div class="assistant-avatar">🤖</div>
                                }
                            </div>
                        </div>
                        <div class="message-content">
                            <div class="message-text">
                                @FormatMessage(message.Message.Content)
                            </div>
                            <button class="copy-message-btn @(IsCopied(message.Index) ? "copied" : "")" 
                                    @onclick="() => CopyMessageAsync(message.Message.Content, message.Index)" 
                                    title="@(IsCopied(message.Index) ? "복사됨!" : "메시지 복사")"
                                    type="button">
                                @if (IsCopied(message.Index))
                                {
                                    <span>✓</span>
                                }
                                else
                                {
                                    <span>📋</span>
                                }
                            </button>
                        </div>
                    </div>
                }
                
                @if (_isStreaming)
                {
                    <div class="message-group assistant-group">
                        <div class="message-avatar-column">
                            <div class="message-avatar">
                                <div class="assistant-avatar">🤖</div>
                            </div>
                        </div>
                        <div class="message-content">
                            <div class="message-text">
                                @if (!string.IsNullOrEmpty(_processingStatus))
                                {
                                    <div class="processing-status">
                                        <span class="status-text">@_processingStatus</span>
                                        <div class="typing-indicator">
                                            <span class="dot">●</span>
                                            <span class="dot">●</span>
                                            <span class="dot">●</span>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    @FormatMessage(_currentStreamedMessage)
                                    @if (string.IsNullOrEmpty(_currentStreamedMessage))
                                    {
                                        <div class="typing-indicator">
                                            <span class="dot">●</span>
                                            <span class="dot">●</span>
                                            <span class="dot">●</span>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- 입력 영역 -->
        <div class="input-area">
            <div class="input-container">
                @if (!_hasApiKey)
                {
                    <div class="input-disabled-overlay">
                        🔒 로그인 후 채팅을 시작할 수 있습니다
                        <button @onclick="HandleLoginAsync" class="login-overlay-btn" type="button">
                            👤 로그인
                        </button>
                    </div>
                }
                
                <!-- Model Indicator -->
                <ModelIndicator HasApiKey="_hasApiKey"
                              OnOpenSettings="OpenSettingDialog"
                              OnOpenAIModelSettings="OpenAIModelSettings"
                              OnLogin="HandleLoginAsync"
                              @ref="_modelIndicator" />
                
                <div class="input-wrapper @(!_hasApiKey ? "disabled" : "")">
                    <textarea @oninput="OnInputChange"
                             value="@_userInput"
                             @onkeydown="HandleKeyDown"
                             placeholder="@(_hasApiKey ? "메시지를 입력하세요..." : "로그인 후 사용할 수 있습니다")"
                             disabled="@(_isStreaming || !_hasApiKey)"
                             rows="1"
                             maxlength="@_maxInputLength"
                             id="chatTextArea"
                             class="chat-input"></textarea>
                    <button @onclick="SendMessage"
                           disabled="@(_isStreaming || string.IsNullOrWhiteSpace(_userInput) || !_hasApiKey)"
                           class="send-button"
                           type="button">
                        ➤
                    </button>
                </div>
                @if (_hasApiKey)
                {
                    <div class="input-footer">
                        <span class="character-count @(_isNearLimit ? "warning" : "")">
                            @(_userInput.Length)/@(_maxInputLength)
                        </span>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@* Windows Sandbox 가이드 모달 *@
@if (_showSandboxGuide)
{
    <SandboxGuideModal IsWindowsOS="@_isWindowsOS"
                       OnClose="CloseSandboxGuide" />
}

@* WSB 다운로드 가이드 모달 *@
@if (_showWsbDownloadGuide && _currentService != null)
{
    <WsbDownloadGuideModal ServiceUrl="@_currentService.Url"
                           ServiceDisplayName="@_currentService.DisplayName"
                           OnClose="CloseWsbDownloadGuide"
                           OnDownloadWsb="DownloadWsbAnyway" />
}

@* 서비스 목록 모달 *@
@if (_showServicesModal)
{
    <ServiceCatalogModal OnClose="CloseServicesModal" />
}

@* 설정 모달 *@
@if (_showSettingsModal)
{
    <SettingsModal InitialTab="@_settingsModalInitialTab" OnClose="CloseSettingsModal" />
}