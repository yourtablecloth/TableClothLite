@page "/"
@page "/Chat"

@using System.Text
@using AngleSharp.Html.Parser
@using OpenAI
@using System.Xml
@using System.Net
@using TableClothLite.Components.Catalog
@using TableClothLite.Components.Settings
@using TableClothLite.Services
@using TableClothLite.Components.Guide
@using TableClothLite.Components
@using Markdig
@using TableClothLite.Shared


@inject OpenAIChatService ChatService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject FileDownloadService FileDownloader
@inject SandboxComposerService SandboxComposer
@inject SandboxViewModel Model

<PageTitle>식탁보 AI</PageTitle>

<div class="chat-app">
    <!-- 메인 채팅 영역 -->
    <div class="chat-main">
        <!-- Gentle Update Notification -->
        @if (_showUpdateNotification && _pendingUpdate is not null)
        {
            <div class="update-notification">
                <div class="update-notification-content">
                    <div class="update-info">
                        <span class="update-icon">🎉</span>
                        <div class="update-text">
                            <strong>새 버전이 있습니다!</strong>
                            <div class="version-details">@_pendingUpdate.Version</div>
                        </div>
                    </div>
                    <div class="update-actions">
                        <button @onclick="ApplyUpdateAsync" class="update-btn primary" type="button">
                            업데이트
                        </button>
                        <button @onclick="DismissUpdateNotification" class="update-btn secondary" type="button">
                            나중에
                        </button>
                    </div>
                </div>
            </div>
        }

        <!-- 상단 헤더 -->
        <div class="chat-header">
            <div class="header-left">
                <div class="app-title-header">
                    <img src="/favicon.png" alt="식탁보 AI" class="header-app-icon">
                    <span class="app-name">식탁보 AI</span>
                </div>
                @if (_hasApiKey && _messages.Any())
                {
                    <button @onclick="ResetConversationAsync" class="new-chat-btn-header" type="button" title="새로운 채팅 시작">
                        + 새 채팅
                    </button>
                }
            </div>
            <div class="header-actions">
                <!-- 통합 메뉴 드롭다운 -->
                <div class="menu-dropdown">
                    <button @onclick="ToggleMenuDropdown" class="header-action-btn" title="메뉴" type="button">
                        ⋯
                    </button>
                    <div class="menu-dropdown-content @(_showMenuDropdown ? "show" : "")">
                        @if (_hasApiKey && _messages.Any())
                        {
                            <!-- 로그인 + 대화 있을 때 -->
                            <button @onclick="PrintAndHideDropdown" class="dropdown-item" type="button">
                                🖨️ 인쇄하기
                            </button>
                            <button @onclick="ExportAndHideDropdown" class="dropdown-item" type="button">
                                📄 텍스트로 내보내기
                            </button>
                            <button @onclick="ShareAndHideDropdown" class="dropdown-item" type="button">
                                📤 공유하기
                            </button>
                            <div class="dropdown-divider"></div>
                        }
                        @if (_hasApiKey)
                        {
                            <!-- 로그인 상태에서만 보이는 메뉴 -->
                            <button @onclick="OpenSettingDialogAndHideMenu" class="dropdown-item" type="button">
                                ⚙️ 설정
                            </button>
                            <div class="dropdown-divider"></div>
                        }
                        <!-- 공통 메뉴 -->
                        <button @onclick="OpenServicesModalAndHideMenu" class="dropdown-item" type="button">
                            🛒 서비스 목록
                        </button>
                        <a href="https://github.com/sponsors/yourtablecloth" target="_blank" class="dropdown-item" @onclick="HideMenuDropdown">
                            💝 개발 후원하기
                        </a>
                        <a href="https://github.com/yourtablecloth/TableClothLite" target="_blank" class="dropdown-item" @onclick="HideMenuDropdown">
                            <strong>{;}</strong> GitHub
                        </a>
                        <a href="https://yourtablecloth.app/" target="_blank" class="dropdown-item" @onclick="HideMenuDropdown">
                            🏠 식탁보 홈페이지
                        </a>
                        @if (_hasApiKey)
                        {
                            <!-- 로그인 상태에서만 보이는 로그아웃 -->
                            <div class="dropdown-divider"></div>
                            <button @onclick="LogoutAndHideMenu" class="dropdown-item logout-item" type="button">
                                ⏻ 로그아웃
                            </button>
                        }
                    </div>
                </div>
                
                <!-- 테마 토글 버튼 -->
                <ThemeToggle Compact="true" />
                
                <!-- 로그인 버튼 (로그아웃 상태일 때만 표시) -->
                @if (_isCheckingApiKey)
                {
                    <button class="auth-btn-header checking" disabled type="button" title="로그인 상태 확인 중">
                        ⏳
                    </button>
                }
                else if (!_hasApiKey)
                {
                    <button @onclick="HandleLoginAsync" class="auth-btn-header login" type="button" title="로그인">
                        👤 로그인
                    </button>
                }
            </div>
        </div>

        <!-- 메시지 컨테이너 -->
        <div class="messages-container" id="messages">
            @if (!_messages.Any())
            {
                <div class="welcome-screen">
                    <div class="welcome-content">
                        <div class="logo-container">
                            🤖
                        </div>
                        <h1>식탁보 AI에 오신 것을 환영합니다</h1>
                        <p class="welcome-subtitle">금융과 공공 부문에 관한 질문에 답변해 드립니다</p>
                        
                        @if (_hasApiKey)
                        {
                            <div class="example-prompts">
                                <div class="example-prompt" @onclick='() => SetExamplePrompt("인터넷 뱅킹 보안에 대해 알려주세요")'>
                                    💳 인터넷 뱅킹 보안에 대해 알려주세요
                                </div>
                                <div class="example-prompt" @onclick='() => SetExamplePrompt("공공기관 사이트 이용 시 주의사항은?")'>
                                    🏛️ 공공기관 사이트 이용 시 주의사항은?
                                </div>
                                <div class="example-prompt" @onclick='() => SetExamplePrompt("Windows Sandbox의 장점은?")'>
                                    🛡️ Windows Sandbox의 장점은?
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="login-required-notice">
                                <div class="lock-icon">🔒</div>
                                <h3>로그인이 필요합니다</h3>
                                <p>AI 채팅 기능을 사용하려면 OpenRouter 계정으로 로그인해주세요.</p>
                            </div>
                        }
                        
                        <div class="disclaimer" style="font-weight: bolder; color: red;">
                            ⚠️ 사용 시 주의 사항: AI가 생성한 정보는 부정확할 수 있습니다. 중요한 결정은 전문가와 상담하세요. 민감 정보 및 개인 정보는 절대로 입력하지 마세요.
                        </div>
                        
                        @if (!_sponsorBannerDismissed)
                        {
                            <div style="margin-top: 24px;">
                                <SponsorBanner OnDismiss="DismissSponsorBanner" />
                            </div>
                        }
                    </div>
                </div>
            }

            <div class="messages-list">
                @foreach (var message in _messages)
                {
                    <div class="message-group @(message.IsUser ? "user-group" : "assistant-group")">
                        <div class="message-avatar">
                            @if (message.IsUser)
                            {
                                <div class="user-avatar">👤</div>
                            }
                            else
                            {
                                <div class="assistant-avatar">🤖</div>
                            }
                        </div>
                        <div class="message-content">
                            <div class="message-text">
                                @FormatMessage(message.Content)
                            </div>
                        </div>
                    </div>
                }
                
                @if (_isStreaming)
                {
                    <div class="message-group assistant-group">
                        <div class="message-avatar">
                            <div class="assistant-avatar">🤖</div>
                        </div>
                        <div class="message-content">
                            <div class="message-text">
                                @FormatMessage(_currentStreamedMessage)
                                @if (string.IsNullOrEmpty(_currentStreamedMessage))
                                {
                                    <div class="typing-indicator">
                                        <span class="dot">●</span>
                                        <span class="dot">●</span>
                                        <span class="dot">●</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- 입력 영역 -->
        <div class="input-area">
            <div class="input-container">
                @if (!_hasApiKey)
                {
                    <div class="input-disabled-overlay">
                        🔒 로그인 후 채팅을 시작할 수 있습니다
                        <button @onclick="HandleLoginAsync" class="login-overlay-btn" type="button">
                            👤
                        </button>
                    </div>
                }
                
                <!-- Model Indicator -->
                <ModelIndicator HasApiKey="_hasApiKey"
                              OnOpenSettings="OpenSettingDialog"
                              OnLogin="HandleLoginAsync"
                              @ref="_modelIndicator" />
                
                <div class="input-wrapper @(!_hasApiKey ? "disabled" : "")">
                    <textarea @oninput="OnInputChange"
                             value="@_userInput"
                             @onkeydown="HandleKeyDown"
                             placeholder="@(_hasApiKey ? "메시지를 입력하세요..." : "로그인 후 사용할 수 있습니다")"
                             disabled="@(_isStreaming || !_hasApiKey)"
                             rows="1"
                             maxlength="@_maxInputLength"
                             id="chatTextArea"
                             class="chat-input"></textarea>
                    <button @onclick="SendMessage"
                           disabled="@(_isStreaming || string.IsNullOrWhiteSpace(_userInput) || !_hasApiKey)"
                           class="send-button"
                           type="button">
                        ➤
                    </button>
                </div>
                @if (_hasApiKey)
                {
                    <div class="input-footer">
                        <span class="character-count @(_isNearLimit ? "warning" : "")">
                            @(_userInput.Length)/@(_maxInputLength)
                        </span>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    .chat-app {
        height: 100vh;
        background: var(--primary-bg);
        color: var(--primary-text);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        overflow: hidden;
    }

    .chat-main {
        display: flex;
        flex-direction: column;
        height: 100vh;
        overflow: hidden;
    }

    .chat-header {
        padding: 12px 20px;
        border-bottom: 1px solid var(--border-color);
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: var(--primary-bg);
    }

    .header-left {
        display: flex;
        align-items: center;
        gap: 16px;
    }

    .app-title-header {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .header-app-icon {
        width: 20px;
        height: 20px;
    }

    .app-name {
        font-size: 16px;
        font-weight: 600;
        color: var(--primary-text);
    }

    .new-chat-btn-header {
        padding: 8px 16px;
        border: 1px solid var(--border-color);
        background: var(--primary-bg);
        color: var(--primary-text);
        cursor: pointer;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.2s ease;
    }

    .new-chat-btn-header:hover {
        background: var(--secondary-bg);
        border-color: var(--accent-color);
        transform: translateY(-1px);
    }

    .header-actions {
        display: flex;
        gap: 8px;
        position: relative;
    }

    /* 드롭다운 공통 스타일 */
    .menu-dropdown {
        position: relative;
    }

    .menu-dropdown-content {
        position: absolute;
        top: 45px;
        right: 0;
        background: var(--card-bg);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        box-shadow: 0 4px 12px var(--shadow-color);
        z-index: 1000;
        min-width: 200px;
        display: none;
    }

    .menu-dropdown-content.show {
        display: block;
    }

    .dropdown-item {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 12px 16px;
        border: none;
        background: none;
        width: 100%;
        text-align: left;
        cursor: pointer;
        font-size: 14px;
        color: var(--primary-text);
        text-decoration: none;
        transition: background-color 0.2s ease;
    }

    .dropdown-item:hover {
        background: var(--secondary-bg);
    }

    .dropdown-item:first-child {
        border-radius: 8px 8px 0 0;
    }

    .dropdown-item:last-child {
        border-radius: 0 0 8px 8px;
    }

    .dropdown-item:only-child {
        border-radius: 8px;
    }

    .dropdown-divider {
        height: 1px;
        background: var(--border-color);
        margin: 4px 0;
    }

    .logout-item {
        color: var(--error-color);
        font-weight: 600;
    }

    .logout-item:hover {
        background: rgba(239, 68, 68, 0.1);
    }

    .sponsor-item {
        background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
        color: white !important;
        font-weight: 600;
    }

    .sponsor-item:hover {
        background: linear-gradient(135deg, #ee5a24 0%, #d63031 100%) !important;
        color: white !important;
    }

    /* 로그인 버튼 스타일 */
    .auth-btn-header {
        padding: 8px 16px;
        border: 1px solid var(--border-color);
        background: var(--accent-color);
        color: white;
        cursor: pointer;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .auth-btn-header:hover:not(:disabled) {
        filter: brightness(0.9);
        transform: translateY(-1px);
    }

    .auth-btn-header.checking {
        background: var(--secondary-bg);
        color: var(--secondary-text);
        cursor: not-allowed;
    }

    .messages-container {
        flex: 1;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        background: var(--primary-bg);
    }

    .welcome-screen {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 24px;
        background: var(--primary-bg);
    }

    .welcome-content {
        max-width: 600px;
        text-align: center;
    }

    .logo-container {
        font-size: 48px;
        margin-bottom: 24px;
    }

    .welcome-content h1 {
        font-size: 28px;
        font-weight: 600;
        margin-bottom: 8px;
        color: var(--primary-text);
    }

    .welcome-subtitle {
        font-size: 16px;
        color: var(--secondary-text);
        margin-bottom: 32px;
    }

    .example-prompts {
        display: grid;
        gap: 12px;
        margin-bottom: 32px;
    }

    .example-prompt {
        padding: 16px;
        background: var(--secondary-bg);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        cursor: pointer;
        text-align: left;
        transition: all 0.2s ease;
        color: var(--primary-text);
    }

    .example-prompt:hover {
        background: var(--tertiary-bg);
        transform: translateY(-1px);
        box-shadow: 0 2px 8px var(--shadow-color);
    }

    .login-required-notice {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 16px;
        padding: 32px;
        background: var(--secondary-bg);
        border: 2px dashed var(--border-color);
        border-radius: 12px;
        margin-bottom: 32px;
    }

    .lock-icon {
        font-size: 32px;
    }

    .login-required-notice h3 {
        margin: 0;
        font-size: 18px;
        color: var(--primary-text);
    }

    .login-required-notice p {
        margin: 0;
        color: var(--secondary-text);
        text-align: center;
    }

    .login-cta-btn {
        padding: 12px 24px;
        background: var(--accent-color);
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 14px;
    }

    .disclaimer {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        padding: 12px 16px;
        background: var(--secondary-bg);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        font-size: 14px;
        color: var(--secondary-text);
    }

    .messages-list {
        padding: 24px;
        max-width: 800px;
        margin: 0 auto;
        width: 100%;
    }

    .message-group {
        display: flex;
        gap: 12px;
        margin-bottom: 24px;
    }

    .message-avatar {
        width: 32px;
        height: 32px;
    }

    .user-avatar, .assistant-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 16px;
    }

    .user-avatar {
        background: var(--chat-user-bg);
        color: white;
    }

    .assistant-avatar {
        background: var(--chat-assistant-bg);
        border: 1px solid var(--border-color);
        color: var(--primary-text);
    }

    .message-content {
        flex: 1;
    }

    .message-text {
        font-size: 15px;
        line-height: 1.6;
        word-wrap: break-word;
        color: var(--primary-text);
    }

    .user-group .message-text {
        background: var(--secondary-bg);
        padding: 12px 16px;
        border-radius: 12px;
        border-top-left-radius: 4px;
    }

    .typing-indicator {
        display: flex;
        gap: 4px;
        padding: 12px 0;
    }

    .dot {
        animation: typing 1.4s infinite ease-in-out;
        color: var(--secondary-text);
    }

    .dot:nth-child(1) { animation-delay: -0.32s; }
    .dot:nth-child(2) { animation-delay: -0.16s; }

    @@keyframes typing {
        0%, 80%, 100% { opacity: 0.3; }
        40% { opacity: 1; }
    }

    .input-area {
        border-top: 1px solid var(--border-color);
        padding: 12px 24px;
        position: relative;
        background: var(--primary-bg);
    }

    .input-container {
        max-width: 800px;
        margin: 0 auto;
        position: relative;
    }

    .input-disabled-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: var(--primary-bg);
        border: 1px solid var(--border-color);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 12px;
        z-index: 10;
        border-radius: 12px;
        color: var(--primary-text);
        font-size: 14px;
        font-weight: 500;
        box-shadow: 0 2px 8px var(--shadow-color);
    }

    .login-overlay-btn {
        padding: 10px 20px;
        background: var(--accent-color);
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 600;
        transition: all 0.2s ease;
        box-shadow: 0 2px 4px rgba(0, 123, 255, 0.2);
    }

    .login-overlay-btn:hover {
        background: var(--accent-color);
        filter: brightness(0.9);
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0, 123, 255, 0.3);
    }

    .input-wrapper {
        display: flex;
        gap: 8px;
        padding: 8px;
        background: var(--secondary-bg);
        border: 1px solid var(--border-color);
        border-radius: 12px;
    }

    .input-wrapper.disabled {
        opacity: 0.6;
        pointer-events: none;
    }

    .chat-input {
        flex: 1;
        border: none;
        background: transparent;
        outline: none;
        font-size: 15px;
        color: var(--primary-text);
        min-height: 24px;
        max-height: 120px;
        resize: none;
        font-family: inherit;
    }

    .chat-input::placeholder {
        color: var(--secondary-text);
    }

    .send-button {
        width: 36px;
        height: 36px;
        border: none;
        background: var(--accent-color);
        color: white;
        cursor: pointer;
        border-radius: 8px;
        font-size: 16px;
        transition: all 0.2s ease;
    }

    .send-button:hover:not(:disabled) {
        filter: brightness(0.9);
    }

    .send-button:disabled {
        background: var(--secondary-text);
        cursor: not-allowed;
    }

    .input-footer {
        display: flex;
        justify-content: flex-end;
        margin-top: 8px;
    }

    .character-count {
        font-size: 12px;
        color: var(--secondary-text);
    }

    .character-count.warning {
        color: var(--error-color);
        font-weight: 600;
    }

    /* 반응형 */
    @@media (max-width: 768px) {
        .chat-header {
            padding: 8px 12px;
        }

        .header-left {
            gap: 8px;
        }

        .new-chat-btn-header {
            padding: 6px 12px;
            font-size: 12px;
        }

        .messages-list {
            padding: 16px;
        }

        .input-area {
            padding: 8px 16px;
        }

        .welcome-content h1 {
            font-size: 24px;
        }

        .example-prompts {
            grid-template-columns: 1fr;
        }
    }

    /* Update Notification Styles */
    .update-notification {
        position: fixed;
        top: 20px;
        right: 20px;
        max-width: 320px;
        background: linear-gradient(135deg, var(--secondary-bg) 0%, var(--tertiary-bg) 100%);
        border: 1px solid var(--accent-color);
        border-radius: 12px;
        box-shadow: 0 8px 25px var(--shadow-color);
        z-index: 1000;
        animation: slideInFromRight 0.4s cubic-bezier(0.22, 1, 0.36, 1);
        backdrop-filter: blur(8px);
    }

    .update-notification-content {
        padding: 16px;
    }

    .update-info {
        display: flex;
        align-items: flex-start;
        gap: 12px;
        margin-bottom: 12px;
    }

    .update-icon {
        font-size: 20px;
        flex-shrink: 0;
        margin-top: 2px;
    }

    .update-text strong {
        display: block;
        color: var(--accent-color);
        font-size: 14px;
        font-weight: 600;
        margin-bottom: 2px;
    }

    .version-details {
        font-size: 12px;
        color: var(--secondary-text);
        font-weight: 500;
    }

    .update-actions {
        display: flex;
        gap: 8px;
    }

    .update-btn {
        flex: 1;
        padding: 8px 12px;
        border: none;
        border-radius: 6px;
        font-size: 12px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .update-btn.primary {
        background: var(--accent-color);
        color: white;
    }

    .update-btn.primary:hover {
        filter: brightness(0.9);
        transform: translateY(-1px);
    }

    .update-btn.secondary {
        background: transparent;
        color: var(--accent-color);
        border: 1px solid var(--accent-color);
    }

    .update-btn.secondary:hover {
        background: var(--secondary-bg);
    }

    @@keyframes slideInFromRight {
        from {
            opacity: 0;
            transform: translateX(100px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    /* 모바일에서 알림 위치 조정 */
    @@media (max-width: 480px) {
        .update-notification {
            top: 10px;
            right: 10px;
            left: 10px;
            max-width: none;
        }

        .app-name {
            font-size: 14px;
        }

        .header-actions {
            gap: 4px;
        }

        .action-btn {
            width: 32px;
            height: 32px;
            font-size: 14px;
        }

        .new-chat-btn-header {
            display: none; /* 매우 작은 화면에서는 숨김 */
        }

        .auth-btn-header.login {
            padding: 6px 12px;
            font-size: 12px;
        }
    }
</style>

@* Windows Sandbox 가이드 모달 *@
@if (_showSandboxGuide)
{
    <SandboxGuideModal IsWindowsOS="@_isWindowsOS"
                       OnClose="CloseSandboxGuide" />
}

@* 서비스 목록 모달 *@
@if (_showServicesModal)
{
    <ServiceCatalogModal OnClose="CloseServicesModal" />
}

@* 설정 모달 *@
@if (_showSettingsModal)
{
    <SettingsModal OnClose="CloseSettingsModal" />
}